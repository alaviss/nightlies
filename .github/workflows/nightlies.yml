name: Nightlies
on:
  push:
    branches:
      - master
      - actions
  pull_request:
    branches:
      - master
      - actions
  schedule:
    - cron: '0 0 * * *'

jobs:
  setup:
    name: 'build settings'
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.matrix.outputs.versions }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Generate version matrix
        id: matrix
        shell: bash
        run: |
          # Tracked branches
          branches=( 'devel' 'version-1-2' )

          getHash() {
            git ls-remote "https://github.com/$1" "$2" | cut -f 1
          }

          (
            for branch in "${branches[@]}"; do
              jq --null-input \
                 --arg branch "$branch" \
                 --arg commit "$(getHash nim-lang/Nim "$branch")" \
                 '{ branch: $branch, commit: $commit }'
            done
          ) | jq -s '.' | tee versions.json

          echo "::set-output name=versions::$(jq -c '.' versions.json)"

      - name: Generate environment variables
        id: env
        shell: bash
        run: |
          declare -A environment=(
            ["SOURCE_CODE_EPOCH"]="$(date -u +%s)"
          )

          (
            for var in "${!environment[@]}"; do
              jq --null-input \
                 --arg variable "$var" \
                 --arg value "${environment[$var]}" \
                 '{ ($variable): $value }'
            done
          ) | jq -s 'reduce .[] as $item (null; . + $item)' | tee variables.json

          echo "::set-output name=environment::$(jq -c '.' variables.json)"

  sourceArchive:
    needs: setup

    strategy:
      matrix:
        version: ${{ fromJson(needs.setup.outputs.versions) }}
    name: 'source (${{ matrix.version.branch }}, ${{ matrix.version.commit }})'
    runs-on: ubuntu-latest
    env: ${{ fromJson(needs.setup.outputs.environment) }}
    steps:
      - name: Restore Nim from cache
        id: nim-cache
        uses: actions/cache@v1
        with:
          path: nim/output
          key: 'source-${{ matrix.version.commit }}-test1'

      - name: Get latest csources version
        if: steps.nim-cache.outputs.cache-hit != 'true'
        id: csources-version
        shell: bash
        run: |
          getHash() {
            git ls-remote "https://github.com/$1" "$2" | cut -f 1
          }

          echo "::set-output name=commit::$(getHash nim-lang/csources master)"

      - name: Restore csources from cache
        if: steps.nim-cache.outputs.cache-hit != 'true'
        id: csources-cache
        uses: actions/cache@v1
        with:
          path: csources/bin
          key: 'csources-${{ runner.os }}-${{ steps.csources-version.outputs.commit }}-test'

      - name: Checkout Nim
        if: steps.nim-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: nim-lang/Nim
          ref: ${{ matrix.version.commit }}
          path: nim

      - name: Checkout csources
        if: >
          steps.nim-cache.outputs.cache-hit != 'true' &&
          steps.csources-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: nim-lang/csources
          path: csources

      - name: Setup environment
        shell: bash
        run: echo '::add-path::${{ github.workspace }}/nim/bin'

      - name: Build 1-stage csources compiler
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          if [[ ! -e csources/bin/nim ]]; then
            make -C csources -j $ncpu CC=gcc
          else
            echo 'Using prebuilt csources'
          fi
          cp csources/bin/nim nim/bin

      - name: Build compiler
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd nim
          nim c koch
          ./koch boot -d:release

      - name: Build source archive
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd nim
          ./koch csources -d:danger
          ./koch xz

          mkdir -p output
          cp build/nim-*.tar.xz output

      - name: Upload source archive
        uses: actions/upload-artifact@v2
        with:
          name: 'nim-${{ matrix.version.commit }}'
          path: nim/output/*

  build:
    needs: [ setup, sourceArchive ]

    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.setup.outputs.versions) }}
        target:
          - os: linux
            cpu: amd64
            triple: x86_64-linux-musl
          - os: linux
            cpu: i386
            triple: i686-linux-musl
          - os: linux
            cpu: aarch64
            triple: aarch64-linux-musl
          - os: linux
            cpu: armv7l
            triple: armv7l-linux-musleabihf
          - os: macosx
            cpu: amd64
          - os: windows
            cpu: amd64
            docs: true
          - os: windows
            cpu: i386
        include:
          - target:
              os: linux
            builder: ubuntu-18.04
          - target:
              os: macosx
            builder: macos-10.15
          - target:
              os: windows
            builder: windows-2019

    env: ${{ fromJson(needs.setup.outputs.environment) }}
    name: '${{ matrix.target.os }}-${{ matrix.target.cpu }} (${{ matrix.version.branch }}, ${{ matrix.version.commit }})'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Checkout build scripts
        uses: actions/checkout@v2
        with:
          path: nightlies

      - name: Cache dependencies (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v1
        with:
          path: external
          key: 'deps-windows-${{ matrix.target.cpu }}-test1'

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          case '${{ matrix.target.cpu }}' in
            amd64)
              arch=64
              ;;
            i386)
              arch=32
              ;;
            *)
              echo 'ERROR: Unsupported architecture ''${{ matrix.target.cpu }}'''
              exit 1
              ;;
          esac

          if [[ ! -d external ]]; then
            mkdir external
            cd external

            curl -L "https://nim-lang.org/download/mingw$arch-6.3.0.7z" -o "mingw$arch.7z"
            curl -L "https://nim-lang.org/download/windeps.zip" -o "windeps.zip"

            7z x "mingw$arch.7z"
            7z x -odlls "windeps.zip"
          else
            echo "Using cached dependencies"
          fi

          echo '::add-path::${{ github.workspace }}/external/'"mingw$arch"'/bin'
          echo '::add-path::${{ github.workspace }}/external/dlls'
          echo "::set-env name=arch::$arch"

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p external
          cd external
          # Import GPG key
          curl -L https://zv.io/BE4BF7E6811C5BA41345C11EB1D0B4566FBBDB40.asc | gpg --import

          musl_toolchain='${{ matrix.target.triple }}'-native
          curl -LO "https://more.musl.cc/9.3.0/i686-linux-musl/$musl_toolchain.tgz"
          curl -LO "https://more.musl.cc/9.3.0/i686-linux-musl/$musl_toolchain.tgz.sig"

          gpg --quiet --verify "$musl_toolchain.tgz.sig"
          tar xzf "$musl_toolchain.tgz"

          echo '::add-path::${{ github.workspace }}/external/'"$musl_toolchain"'/bin'

          xargs < '../nightlies/buildreq.txt' '../nightlies/bw-install.sh' -o "$musl_toolchain" -t '${{ matrix.target.triple }}'

          case '${{ matrix.target.arch }}' in
            i386 | amd64)
              ;;
            *)
              docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
              ;;
          esac

          ldflags=(-static -Wl,--as-needed -lssl -lcrypto -lpcre -lsqlite3)
          nimflags=(
            $(printf -- "--passL:%s " "${ldflags[@]}")
            --dynlibOverride:ssl # Needed to disable auto version selection in the wrapper
            --dynlibOverrideAll
          )
          echo "::set-env name=LDFLAGS::${ldflags[@]}"
          echo "::set-env name=NIMFLAGS::${nimflags[@]}"

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir '${{ github.workspace }}/external'
          cd external

          xargs < '../nightlies/buildreq.txt' '../nightlies/bw-install.sh'

          ldflags=(-Wl,-static '-Wl,-L${{ github.workspace }}/external/lib' -lssl -lcrypto -lpcre -lsqlite3 -Wl,-dynamic)
          nimflags=(
            $(printf -- "--passL:%s " "${ldflags[@]}")
            --dynlibOverride:ssl # Needed to disable auto version selection in the wrapper
            --dynlibOverrideAll
          )
          echo "::set-env name=LDFLAGS::${ldflags[@]}"
          echo "::set-env name=NIMFLAGS::${nimflags[@]}"

      - name: Download generated source package
        uses: actions/download-artifact@v2
        with:
          name: 'nim-${{ matrix.version.commit }}'
          path: source

      - name: Extract source package
        id: source
        shell: bash
        run: |
          source=( source/nim-*.tar.xz )
          version="${source[0]##*nim-}"
          version="${version%.tar.xz}"
          case '${{ runner.os }}' in
            'Windows')
              7z x -so "${source[0]}" | 7z x -si -ttar -aoa
              ;;
            *)
              tar xJf "${source[0]}"
              ;;
          esac

          echo "::set-output name=version::$version"

      - name: Setup environment
        shell: bash
        run: echo '::add-path::${{ github.workspace }}/nim-${{ steps.source.outputs.version }}/bin'

      - name: Build 1-stage csources compiler
        shell: bash
        run: |
          cd 'nim-${{ steps.source.outputs.version }}'
          nproc=
          case '${{ runner.os }}' in
            'Windows')
              nproc=$NUMBER_OF_PROCESSORS
              ;;
            'macOS')
              nproc=$(sysctl -n hw.ncpu)
              ;;
            'Linux')
              nproc=$(nproc)
              ;;
          esac
          if [[ $nproc -le 0 ]]; then
            nproc=1
          fi

          make -j$nproc CC=gcc ucpu='${{ matrix.target.cpu }}'

      - name: Build koch
        shell: bash
        run: |
          cd 'nim-${{ steps.source.outputs.version }}'
          nim c $NIMFLAGS koch

      - name: Build compiler
        shell: bash
        run: |
          cd 'nim-${{ steps.source.outputs.version }}'
          ./koch boot -d:release $NIMFLAGS

      - name: Build tools
        shell: bash
        run: |
          cd 'nim-${{ steps.source.outputs.version }}'
          ./koch tools -d:release $NIMFLAGS

      - name: Generate release zip files (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          nim='nim-${{ steps.source.outputs.version }}'
          cd "$nim"
          mkdir -p web/upload/download

          nim c $NIMFLAGS --outdir:. tools/winrelease
          ./winrelease

          artifact=${nim}_x$arch.zip
          cp -t '${{ github.workspace }}' "web/upload/download/"{"$artifact",'docs-${{ steps.source.outputs.version }}.zip'}
          echo "::set-env name=artifact::$artifact"

      - name: Generate release tarball (non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          nim='nim-${{ steps.source.outputs.version }}'
          find "$nim" \
            -name nimcache -prune -o \
            -name '*.o' -o \
            -path '*/compiler/nim' -o \
            -path '*/compiler/nim?' | xargs rm -rf

          release=$nim-'${{ matrix.target.os }}_${{ matrix.target.cpu }}'
          tar cf "$release.tar" "$nim"
          xz -9e "$release.tar"

          echo "::set-env name=artifact::$release.tar.xz"

      - name: Upload generated binaries
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact }}
          path: ${{ env.artifact }}

      - name: Upload generated docs
        if: runner.os == 'Windows' && matrix.target.docs == true
        uses: actions/upload-artifact@v2
        with:
          name: 'docs-${{ steps.source.outputs.version }}.zip'
          path: 'docs-${{ steps.source.outputs.version }}.zip'
