name: Nightlies
on:
  push:
    branches:
      - master
      - actions
  pull_request:
    branches:
      - master
      - actions
  schedule:
    - cron: '0 0 * * *'

jobs:
  setup:
    name: 'build settings'
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.matrix.outputs.versions }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Generate version matrix
        id: matrix
        shell: bash
        run: |
          # Tracked branches
          branches=( 'devel' 'version-1-2' )

          getHash() {
            git ls-remote "https://github.com/$1" "$2" | cut -f 1
          }

          (
            for branch in "${branches[@]}"; do
              jq --null-input \
                 --arg branch "$branch" \
                 --arg commit "$(getHash nim-lang/Nim "$branch")" \
                 '{ branch: $branch, commit: $commit }'
            done
          ) | jq -s '.' | tee versions.json

          echo "::set-output name=versions::$(jq -c '.' versions.json)"

      - name: Generate environment variables
        id: env
        shell: bash
        run: |
          declare -A environment=(
            ["SOURCE_CODE_EPOCH"]="$(date -u +%s)"
          )

          (
            for var in "${!environment[@]}"; do
              jq --null-input \
                 --arg variable "$var" \
                 --arg value "${environment[$var]}" \
                 '{ ($variable): $value }'
            done
          ) | jq -s 'reduce .[] as $item (null; . + $item)' | tee variables.json

          echo "::set-output name=environment::$(jq -c '.' variables.json)"

  sourceArchive:
    needs: setup

    strategy:
      matrix:
        version: ${{ fromJson(needs.setup.outputs.versions) }}
    name: 'source (${{ matrix.version.branch }}, ${{ matrix.version.commit }})'
    runs-on: ubuntu-latest
    env: ${{ fromJson(needs.setup.outputs.environment) }}
    steps:
      - name: Get latest csources version
        id: csources-version
        shell: bash
        run: |
          getHash() {
            git ls-remote "https://github.com/$1" "$2" | cut -f 1
          }

          echo "::set-output name=commit::$(getHash nim-lang/csources master)"

      - name: Restore Nim from cache
        id: nim-cache
        uses: actions/cache@v1
        with:
          path: nim/output
          key: 'source-${{ matrix.version.commit }}-test1'

      - name: Restore csources from cache
        if: steps.nim-cache.outputs.cache-hit != 'true'
        id: csources-cache
        uses: actions/cache@v1
        with:
          path: csources/bin
          key: 'csources-${{ runner.os }}-${{ steps.csources-version.outputs.commit }}-test'

      - name: Checkout Nim
        if: steps.nim-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: nim-lang/Nim
          ref: ${{ matrix.version.commit }}
          path: nim

      - name: Checkout csources
        if: >
          steps.nim-cache.outputs.cache-hit != 'true' &&
          steps.csources-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: nim-lang/csources
          path: csources

      - name: Setup environment
        shell: bash
        run: echo '::add-path::${{ github.workspace }}/nim/bin'

      - name: Build 1-stage csources compiler
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          if [[ ! -e csources/bin/nim ]]; then
            make -C csources -j $ncpu CC=gcc
          else
            echo 'Using prebuilt csources'
          fi
          cp csources/bin/nim nim/bin

      - name: Build compiler
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd nim
          nim c koch
          ./koch boot -d:release

      - name: Build source archive
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd nim
          ./koch csources -d:release
          ./koch xz

          mkdir -p output
          cp build/nim-*.tar.xz output

      - name: Upload source archive
        uses: actions/upload-artifact@v2
        with:
          name: 'nim-${{ matrix.version.commit }}'
          path: nim/output/*

  build:
    needs: [ setup, sourceArchive ]

    strategy:
      matrix:
        version: ${{ fromJson(needs.setup.outputs.versions) }}
        target:
          - os: macosx
            arch: amd64
          - os: windows
            arch: amd64
          - os: windows
            arch: i386
        include:
          - target:
              os: macosx
            builder: macos-10.15
          - target:
              os: windows
            builder: windows-2019

    env: ${{ fromJson(needs.setup.outputs.environment) }}
    name: '${{ matrix.target.os }}-${{ matrix.target.arch }} (${{ matrix.version.branch }}, ${{ matrix.version.commit }})'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Download generated source package
        uses: actions/download-artifact@v2
        with:
          name: 'nim-${{ matrix.version.commit }}'
          path: source

      - name: Extract source package
        shell: bash
        run: |
          case '${{ runner.os }}'
            'Windows')
              7z x source/nim-*.tar.xz
            'macOS')
              bsdtar xf source/nim-*.tar.xz
          esac

      - name: Setup environment
        shell: bash
        run: echo '::add-path::${{ github.workspace }}/'nim-*'/bin'

      - name: Build 1-stage csources compiler
        shell: bash
        run:
          cd nim-*
          nproc=
          case '${{ runner.os }}'
            'Windows')
              nproc=$NUMBER_OF_PROCESSORS
            'macOS')
              nproc=$(sysctl hw.ncpu)
          esac

          make -j$nproc

      - name: Build koch
        shell: bash
        run:
          cd nim-*
          nim c koch

      - name: Build compiler
        shell: bash
        run:
          cd nim-*
          ./koch boot -d:release
