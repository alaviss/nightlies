name: Nightlies
on:
  push:
    branches:
      - master
      - actions
  pull_request:
    branches:
      - master
      - actions
  schedule:
    - cron: '0 0 * * *'

jobs:
  source:
    strategy:
      matrix:
        branch: [devel, version-1-2]
    name: 'Generate source package for branch ${{ matrix.branch }}'
    runs-on: ubuntu-18.04
    outputs:
      archive: ${{ steps.source-archive.archive }}
      commit: ${{ steps.versions.nim }}
      branch: ${{ matrix.branch }}
    steps:
      - name: Get versions
        id: versions
        shell: bash
        run: |
          getHash() {
            git ls-remote "https://github.com/$1" "$2" | cut -f 1
          }

          nimHash=$(getHash nim-lang/Nim '${{ matrix.branch }}')
          csourcesHash=$(getHash nim-lang/csources master)
          echo "::set-output name=nim::$nimHash"
          echo "::set-output name=csources::$csourcesHash"

      - name: Restore Nim from cache
        id: nim-cache
        uses: actions/cache@v1
        with:
          path: output
          key: '${{ steps.versions.outputs.nim }}-test'

      - name: Restore csources from cache
        if: steps.nim-cache.outputs.cache-hit != 'true'
        id: csources-cache
        uses: actions/cache@v1
        with:
          path: bin
          key: '${{ runner.os }}-${{ steps.versions.outputs.csources }}-test'

      - name: Checkout Nim
        if: steps.nim-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: nim-lang/Nim
          ref: ${{ steps.versions.outputs.nim }}
          path: nim

      - name: Checkout csources
        if: >
          steps.nim-cache.outputs.cache-hit != 'true' &&
          steps.csources-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: nim-lang/csources
          path: csources

      - name: Setup environment
        shell: bash
        run: echo '::add-path::${{ github.workspace }}/nim/bin'

      - name: Build 1-stage csources compiler
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          if [[ ! -e csources/bin/nim ]]; then
            make -C csources -j $ncpu CC=gcc
          else
            echo 'Using prebuilt csources'
          fi
          cp csources/bin/nim nim/bin

      - name: Build compiler
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd nim
          nim c koch
          ./koch boot -d:release

      - name: Build source archive
        id: source-archive
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd nim
          ./koch csources -d:release
          ./koch xz

          output=(build/nim-*.tar.xz)
          echo "::set-output name=archive::$(realpath -z "$output")"
  builder:
    strategy:
      matrix:
        branch: [devel, version-1-2]
    runs-on: ubuntu-latest
    needs: source
    steps:
      - run: echo '${{ toJson(needs) }}'
